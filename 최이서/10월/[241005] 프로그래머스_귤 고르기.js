function solution(k, tangerine) {
  let sizeList = {}; // 귤의 크기별 개수 저장

  // 크기별 귤 개수
  for (let size of tangerine) {
    if (sizeList[size] === undefined) {
      sizeList[size] = 1;
    } else {
      sizeList[size] += 1;
    }
  }

  let sortedCounts = Object.values(sizeList).sort((a, b) => b - a);

  let total = 0;
  let ans = 0; // 귤 k개를 고를 때 크기가 서로 다른 종류의 수 ans

  // 가장 많은 개수부터 선택
  for (let count of sortedCounts) {
    total += count;
    ans++;
    if (total >= k) break;
  }

  return ans;
}

// 정확성  테스트
// 테스트 1 〉	통과 (8.77ms, 39.5MB)
// 테스트 2 〉	통과 (5.45ms, 39.6MB)
// 테스트 3 〉	통과 (5.42ms, 39.6MB)
// 테스트 4 〉	통과 (8.79ms, 39.6MB)
// 테스트 5 〉	통과 (5.39ms, 39.5MB)
// 테스트 6 〉	통과 (5.43ms, 39.4MB)
// 테스트 7 〉	통과 (5.46ms, 39.6MB)
// 테스트 8 〉	통과 (6.55ms, 39.5MB)
// 테스트 9 〉	통과 (5.37ms, 39.5MB)
// 테스트 10 〉	통과 (5.32ms, 39.6MB)
// 테스트 11 〉	통과 (0.11ms, 33.6MB)
// 테스트 12 〉	통과 (0.07ms, 33.4MB)
// 테스트 13 〉	통과 (0.09ms, 33.5MB)
// 테스트 14 〉	통과 (0.10ms, 33.4MB)
// 테스트 15 〉	통과 (0.12ms, 33.5MB)
// 테스트 16 〉	통과 (0.07ms, 33.4MB)
// 테스트 17 〉	통과 (0.12ms, 33.5MB)
// 테스트 18 〉	통과 (0.12ms, 33.5MB)
// 테스트 19 〉	통과 (0.10ms, 33.5MB)
// 테스트 20 〉	통과 (0.11ms, 33.5MB)
// 테스트 21 〉	통과 (0.41ms, 33.5MB)
// 테스트 22 〉	통과 (0.44ms, 33.5MB)
// 테스트 23 〉	통과 (0.65ms, 33.6MB)
// 테스트 24 〉	통과 (1.12ms, 33.7MB)
// 테스트 25 〉	통과 (3.81ms, 35MB)
// 테스트 26 〉	통과 (14.62ms, 41.1MB)
// 테스트 27 〉	통과 (88.85ms, 66.5MB)
// 테스트 28 〉	통과 (46.12ms, 48.3MB)
// 테스트 29 〉	통과 (102.07ms, 53.7MB)
// 테스트 30 〉	통과 (125.44ms, 66.5MB)
// 테스트 31 〉	통과 (17.80ms, 39.9MB)
// 테스트 32 〉	통과 (21.94ms, 40.5MB)
// 테스트 33 〉	통과 (75.62ms, 57MB)
// 테스트 34 〉	통과 (64.07ms, 53.9MB)
// 채점 결과
// 정확성: 100.0
// 합계: 100.0 / 100.0
